{"version":3,"sources":["search.js","App.js","serviceWorker.js","index.js"],"names":["client","elasticsearch","Client","host","log","search","_ref","index","query","Promise","resolve","reject","body","err","res","hits","map","hit","_source","Beat","beat","time","Date","message","update","Object","asyncToGenerator","regenerator_default","a","mark","_callee","setState","state","wrap","_context","prev","next","t0","t1","objectSpread","t2","t3","match_all","t4","t5","sent","t6","beats","t7","stop","this","_x","_x2","apply","arguments","App","_useState","useState","_useState2","slicedToArray","useEffect","intervalId","setInterval","clearInterval","react_default","createElement","Fragment","key","toString","type","checked","readOnly","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0OAEMA,EAAS,WAAIC,EAAcC,QAAO,CACpCC,KAAM,gCACNC,IAAK,UAGMC,EAAA,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,MAAOC,EAATF,EAASE,MAAT,OACX,IAAIC,QAAQ,SAACC,EAASC,GAAV,OACRX,EAAOK,OAAO,CACVE,MAAOA,EACPK,KAAM,CAAEJ,UACT,SAACK,EAAKC,GAAN,OAAcD,EACXF,EAAOE,GACPH,EAAQI,EAAIC,KAAKA,KAAKC,IAAI,SAAAC,GAAG,OAAIA,EAAIC,gBCV7CC,EAAO,SAAAC,GAAI,MAAK,CAClBC,KAAM,IAAIC,KAAKF,EAAK,eACpBG,QAASH,EAAKG,UAGZC,EAAM,eAAAlB,EAAAmB,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,EAAUC,GAAjB,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,GACXN,EADWG,EAAAI,GAAAC,EAAA,EAAAL,EAAAM,GAAA,GAAAN,EAAAO,GAEJT,EAFIE,EAAAE,KAAA,EAGO/B,EAAO,CACjBE,MAAO,iBACPC,MAAO,CACHkC,UAAW,MANZ,OAAAR,EAAAS,GAQCxB,EARDe,EAAAU,GAAAV,EAAAW,KAQH7B,IARGkB,EAAAS,IAAAT,EAAAY,GAAA,CAGPC,MAHOb,EAAAU,IAAAV,EAAAc,IAAA,EAAAd,EAAAI,IAAAJ,EAAAM,GAAAN,EAAAO,GAAAP,EAAAY,KAAA,EAAAZ,EAAAG,IAAAH,EAAAc,IAAA,yBAAAd,EAAAe,SAAAnB,EAAAoB,SAAH,gBAAAC,EAAAC,GAAA,OAAA9C,EAAA+C,MAAAH,KAAAI,YAAA,GAmCGC,EAvBH,WAAM,IAAAC,EACYC,mBAAS,iBAAO,CAACV,MAAO,MADpCW,EAAAjC,OAAAkC,EAAA,EAAAlC,CAAA+B,EAAA,GACPxB,EADO0B,EAAA,GACA3B,EADA2B,EAAA,GASd,OANAE,oBAAU,WACNpC,EAAOO,EAAUC,GACjB,IAAM6B,EAAaC,YAAY,kBAAMtC,EAAOO,EAAUC,IAAQ,KAC9D,OAAO,kBAAM+B,cAAcF,KAC5B,IAGCG,EAAApC,EAAAqC,cAAA,UACIjC,EAAMe,MAAM/B,IAAI,SAAAI,GAAI,OAChB4C,EAAApC,EAAAqC,cAACD,EAAApC,EAAMsC,SAAP,CAAgBC,IAAK/C,EAAKC,KAAK+C,YAC3BJ,EAAApC,EAAAqC,cAAA,kBACAD,EAAApC,EAAAqC,cAAA,UAAK7C,EAAKC,KAAK+C,YACfJ,EAAApC,EAAAqC,cAAA,qBACAD,EAAApC,EAAAqC,cAAA,UAAID,EAAApC,EAAAqC,cAAA,SAAOI,KAAK,WAAWC,QAA0B,UAAjBlD,EAAKG,QAAqBgD,UAAQ,UCzBtEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAApC,EAAAqC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.032bbda2.chunk.js","sourcesContent":["import elasticsearch from 'elasticsearch-browser'\n\nconst client = new elasticsearch.Client({\n    host: 'https://es-frank.dev.daum.net',\n    log: 'error'\n});\n\nexport default ({index, query}) =>\n    new Promise((resolve, reject) =>\n        client.search({\n            index: index,\n            body: { query },\n        }, (err, res) => err\n            ? reject(err)\n            : resolve(res.hits.hits.map(hit => hit._source))))\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport search from \"./search\";\n\nconst Beat = beat => ({\n    time: new Date(beat['@timestamp']),\n    message: beat.message,\n});\n\nconst update = async (setState, state) => {\n    setState({\n        ...state,\n        beats: (await search({\n            index: 'protologbeat-*',\n            query: {\n                match_all: {},\n            }\n        })).map(Beat)\n    })\n}\n\nconst App = () => {\n    const [state, setState] = useState(() => ({beats: []}));\n\n    useEffect(() => {\n        update(setState, state)\n        const intervalId = setInterval(() => update(setState, state), 3000);\n        return () => clearInterval(intervalId)\n    }, [])\n\n    return (\n        <dl>{\n            state.beats.map(beat =>\n                <React.Fragment key={beat.time.toString()}>\n                    <dt>time</dt>\n                    <dd>{beat.time.toString()}</dd>\n                    <dt>message</dt>\n                    <dd><input type=\"checkbox\" checked={beat.message !== \"false\"} readOnly/></dd>\n                </React.Fragment>\n            )\n        }</dl>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}